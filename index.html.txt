<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<title>Support Cheat Sheet</title>
<script crossorigin src="https://unpkg.com/react@18/umd/react.development.js"></script>
<script crossorigin src="https://unpkg.com/react-dom@18/umd/react-dom.development.js"></script>
<script src="https://unpkg.com/@babel/standalone/babel.min.js"></script>
<script src="https://cdn.tailwindcss.com"></script>
</head>
<body>
<div id="root"></div>

<script type="text/babel">
const { useState, useMemo, useEffect } = React;

// Sample initial data
const initialData = [
  {
    id: '1',
    brand: "TechCorp",
    category: "Account Issues",
    subcategory: "Password Reset",
    title: "How to Reset Password",
    steps: [
      "Ask customer to navigate to login page",
      "Click 'Forgot Password' link below login button",
      "Enter registered email address",
      "Check email inbox (and spam folder) for reset link",
      "Click the link and create new password (min 8 characters, 1 uppercase, 1 number)",
      "Confirm successful login with new password"
    ],
    tips: "Password reset links expire after 24 hours. If customer doesn't receive email within 5 minutes, check if email address is correct."
  },
  {
    id: '2',
    brand: "TechCorp",
    category: "Account Issues",
    subcategory: "Login Errors",
    title: "Troubleshooting Login Errors",
    steps: [
      "Verify customer is using correct email address",
      "Ask customer to clear browser cache and cookies",
      "Try incognito/private browsing mode",
      "Check if account is locked due to multiple failed attempts",
      "Verify two-factor authentication if enabled",
      "As last resort, initiate password reset"
    ],
    tips: "Common causes: Caps Lock on, autofill using old password, account temporarily locked."
  },
  {
    id: '3',
    brand: "StyleHub",
    category: "Orders",
    subcategory: "Order Tracking",
    title: "Tracking Order Status",
    steps: [
      "Get order number from customer",
      "Search order in Order Management System",
      "Provide current status: Processing/Shipped/In Transit/Delivered",
      "Share tracking number if available",
      "Provide carrier website link for detailed tracking",
      "Give estimated delivery date based on shipping method"
    ],
    tips: "Standard shipping: 5-7 business days, Express: 2-3 business days. Tracking updates may lag by 24 hours."
  }
];

const SupportCheatSheet = () => {
  const [data, setData] = useState(initialData);
  const [selectedBrand, setSelectedBrand] = useState('');
  const [selectedCategory, setSelectedCategory] = useState('');
  const [selectedSubcategory, setSelectedSubcategory] = useState('');
  const [searchTerm, setSearchTerm] = useState('');
  const [showAdmin, setShowAdmin] = useState(false);

  // Unique dropdown options
  const brands = useMemo(() => [...new Set(data.map(d => d.brand))], [data]);
  const categories = useMemo(() => selectedBrand ? [...new Set(data.filter(d => d.brand===selectedBrand).map(d=>d.category))] : [], [selectedBrand, data]);
  const subcategories = useMemo(() => (selectedBrand && selectedCategory) ? [...new Set(data.filter(d => d.brand===selectedBrand && d.category===selectedCategory).map(d=>d.subcategory))] : [], [selectedBrand, selectedCategory, data]);

  // Filtered data
  const filteredData = useMemo(() => {
    return data.filter(d => 
      (!selectedBrand || d.brand === selectedBrand) &&
      (!selectedCategory || d.category === selectedCategory) &&
      (!selectedSubcategory || d.subcategory === selectedSubcategory) &&
      (!searchTerm || d.title.toLowerCase().includes(searchTerm.toLowerCase()) || d.steps.some(s => s.toLowerCase().includes(searchTerm.toLowerCase())))
    );
  }, [data, selectedBrand, selectedCategory, selectedSubcategory, searchTerm]);

  const resetFilters = () => {
    setSelectedBrand(''); setSelectedCategory(''); setSelectedSubcategory(''); setSearchTerm('');
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 p-4 md:p-8 font-sans">
      <div className="max-w-5xl mx-auto">
        <div className="bg-white p-6 rounded-lg shadow mb-6 flex justify-between items-center">
          <div>
            <h1 className="text-2xl font-bold mb-1">Support Agent Cheat Sheet</h1>
            <p className="text-gray-600">Quick answers and step-by-step guides</p>
          </div>
          <button onClick={()=>setShowAdmin(!showAdmin)} className="px-4 py-2 bg-indigo-600 text-white rounded hover:bg-indigo-700">
            {showAdmin ? 'View Mode' : 'Admin Mode'}
          </button>
        </div>

        {/* Filters */}
        <div className="bg-white p-4 rounded-lg shadow mb-6 grid md:grid-cols-4 gap-4 items-end">
          <input type="text" placeholder="Search..." value={searchTerm} onChange={e=>setSearchTerm(e.target.value)} className="border px-3 py-2 rounded w-full md:col-span-4"/>
          <select value={selectedBrand} onChange={e=>{setSelectedBrand(e.target.value); setSelectedCategory(''); setSelectedSubcategory('')}} className="border px-3 py-2 rounded w-full">
            <option value="">All Brands</option>
            {brands.map(b=> <option key={b}>{b}</option>)}
          </select>
          <select value={selectedCategory} onChange={e=>{setSelectedCategory(e.target.value); setSelectedSubcategory('')}} className="border px-3 py-2 rounded w-full" disabled={!selectedBrand}>
            <option value="">All Categories</option>
            {categories.map(c=> <option key={c}>{c}</option>)}
          </select>
          <select value={selectedSubcategory} onChange={e=>setSelectedSubcategory(e.target.value)} className="border px-3 py-2 rounded w-full" disabled={!selectedCategory}>
            <option value="">All Subcategories</option>
            {subcategories.map(s=> <option key={s}>{s}</option>)}
          </select>
          <button onClick={resetFilters} className="bg-gray-200 px-4 py-2 rounded hover:bg-gray-300 w-full md:col-span-4">Reset Filters</button>
        </div>

        {/* Results */}
        <div className="space-y-4">
          {filteredData.length === 0 ? <div className="bg-white p-6 rounded shadow text-center text-gray-500">No results found</div> :
          filteredData.map(item=>(
            <div key={item.id} className="bg-white p-6 rounded shadow hover:shadow-lg transition">
              <div className="flex flex-wrap gap-2 mb-2">
                <span className="px-2 py-1 bg-blue-100 text-blue-800 rounded text-xs">{item.brand}</span>
                <span className="px-2 py-1 bg-purple-100 text-purple-800 rounded text-xs">{item.category}</span>
                <span className="px-2 py-1 bg-green-100 text-green-800 rounded text-xs">{item.subcategory}</span>
              </div>
              <h2 className="text-xl font-bold mb-2">{item.title}</h2>
              <ol className="list-decimal list-inside space-y-1 mb-2">
                {item.steps.map((s,i)=><li key={i}>{s}</li>)}
              </ol>
              {item.tips && <div className="bg-yellow-50 border-l-4 border-yellow-400 p-2 rounded text-yellow-700">ðŸ’¡ {item.tips}</div>}
            </div>
          ))}
        </div>
      </div>
    </div>
  );
}

ReactDOM.render(<SupportCheatSheet />, document.getElementById('root'));
</script>
</body>
</html>
